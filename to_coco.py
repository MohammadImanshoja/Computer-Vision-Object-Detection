# -*- coding: utf-8 -*-
"""to COCO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VJOr9mamN95k30MXKV_TADOlSQJzPnld
"""

import os
import json
from PIL import Image

def convert_to_coco(dataset_path, output_path):
    # Initialize the COCO format structure
    coco_format = {
        "images": [],
        "annotations": [],
        "categories": [
            {"id": 0, "name": "no_tumor"},  # Added 'no_tumor' category
            {"id": 1, "name": "tumor_type_1"},
            {"id": 2, "name": "tumor_type_2"},
            {"id": 3, "name": "tumor_type_3"}
        ]
    }

    annotation_id = 1
    image_id = 1

    # Loop through each dataset subset
    for subset in ['train', 'valid', 'test']:
        images_folder = os.path.join(dataset_path, subset, 'images')
        labels_folder = os.path.join(dataset_path, subset, 'labels')

        for image_filename in os.listdir(images_folder):
            if not image_filename.endswith('.jpg'):
                continue

            # Process image
            image_path = os.path.join(images_folder, image_filename)

            # Check if the image file exists
            if not os.path.exists(image_path):
                print(f"Warning: Image {image_path} not found. Skipping...")
                continue

            image = Image.open(image_path)
            width, height = image.size  # Retrieve image dimensions

            image_entry = {
                "id": image_id,
                "file_name": os.path.join(subset, 'images', image_filename),
                "width": width,
                "height": height
            }
            coco_format['images'].append(image_entry)

            # Process label
            label_filename = os.path.splitext(image_filename)[0] + '.txt'
            label_path = os.path.join(labels_folder, label_filename)

            # If no corresponding label file, create a 'no_tumor' annotation
            if not os.path.exists(label_path):
                print(f"Warning: Label file {label_filename} not found for image {image_filename}. Marking as 'no_tumor'.")

                annotation_entry = {
                    "id": annotation_id,
                    "image_id": image_id,
                    "category_id": 0,  # 'no_tumor' category
                    "bbox": [],  # Empty bounding box
                    "area": 0.0,  # No area
                    "iscrowd": 0
                }
                coco_format['annotations'].append(annotation_entry)
                annotation_id += 1
                image_id += 1
                continue

            with open(label_path, 'r') as label_file:
                lines = label_file.readlines()
                if not lines:
                    # No objects in this image, mark as 'no_tumor'
                    annotation_entry = {
                        "id": annotation_id,
                        "image_id": image_id,
                        "category_id": 0,  # 'no_tumor' category
                        "bbox": [],  # Empty bounding box
                        "area": 0.0,  # No area
                        "iscrowd": 0
                    }
                    coco_format['annotations'].append(annotation_entry)
                    annotation_id += 1
                else:
                    for line in lines:
                        elements = line.strip().split()
                        if len(elements) != 5:
                            print(f"Warning: Incorrect label format in file {label_filename}. Skipping this line...")
                            continue

                        # Extract the YOLO format elements
                        category_id, x_center, y_center, bbox_width, bbox_height = map(float, elements)

                        # Convert from YOLO format to COCO format
                        x_min = (x_center - bbox_width / 2) * width
                        y_min = (y_center - bbox_height / 2) * height
                        bbox_width = bbox_width * width
                        bbox_height = bbox_height * height

                        # Ensure bounding box values are within image boundaries
                        x_min = max(0, x_min)
                        y_min = max(0, y_min)
                        bbox_width = min(width - x_min, bbox_width)
                        bbox_height = min(height - y_min, bbox_height)

                        # COCO bbox format: [x_min, y_min, width, height]
                        bbox = [x_min, y_min, bbox_width, bbox_height]

                        annotation_entry = {
                            "id": annotation_id,
                            "image_id": image_id,
                            "category_id": int(category_id) + 1,  # Shift by +1 to match category IDs
                            "bbox": bbox,
                            "area": bbox_width * bbox_height,
                            "iscrowd": 0
                        }
                        coco_format['annotations'].append(annotation_entry)
                        annotation_id += 1

            image_id += 1

    # Save the COCO format data to a JSON file
    with open(output_path, 'w') as output_file:
        json.dump(coco_format, output_file, indent=4)
    print(f"COCO JSON file created successfully at {output_path}")

# Specify the path to your dataset and the output path for the JSON file
dataset_path = r'C:\Users\moham\Downloads\Compressed\tumrset\Brain Tumor Detection'
output_json_path = os.path.join(dataset_path, 'annotations.json')

# Generate the COCO JSON file
convert_to_coco(dataset_path, output_json_path)